// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"cinemago/internal/config"
	"cinemago/internal/handler"
	"cinemago/internal/logger"
	"cinemago/internal/repository"
	"cinemago/internal/router"
	"cinemago/internal/server"
	"cinemago/internal/service"
	logger2 "cinemago/pkg/logger"
	"github.com/gofiber/fiber/v2"
	"github.com/spf13/cobra"
)

// Injectors from wire.go:

func InitializeApp(cmd *cobra.Command) (*App, func(), error) {
	client, cleanup, err := repository.NewClient()
	if err != nil {
		return nil, nil, err
	}
	userRepository := repository.NewUserRepository(client)
	userService := service.NewUserService(userRepository)
	userHandler := handler.NewUserHandler(userService)
	userRouter := router.NewUserRouter(userHandler)
	authHandler := handler.NewAuthHandler(userService)
	authRouter := router.NewAuthRouter(authHandler)
	v := router.ProvideRouters(userRouter, authRouter)
	configConfig, err := config.ProvideConfig(cmd)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	loggerLogger, cleanup2, err := logger.NewLogger(configConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	app := server.NewFiberApp(v, loggerLogger)
	wireApp := NewApp(app, configConfig)
	return wireApp, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type App struct {
	App    *fiber.App
	Config *config.Config
	Logger *logger2.Logger
}

func NewApp(app *fiber.App, cfg *config.Config) *App {
	return &App{App: app, Config: cfg}
}
